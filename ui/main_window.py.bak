# ui/main_window.py

from PyQt6.QtWidgets import (
    QMainWindow,
    QWidget,
    QVBoxLayout,
    QHBoxLayout,
    QLabel,
    QFrame,
    QLineEdit,
    QPushButton,
    QComboBox,
    QMessageBox,
    QGroupBox,
    QStatusBar,
    QFileDialog,
    QTabWidget,
    QSplitter,
    QCheckBox,
    QDoubleSpinBox,
)
from PyQt6.QtCore import Qt, QDateTime
from PyQt6.QtGui import QPixmap, QImage, QMovie
import numpy as np
import cv2
import os

from video_capture.camera_feed import CameraFeed
from video_capture.camera_utils import list_available_cameras
from ui.widgets.histogram_plotter import HistogramPlotter
from ui.widgets.filter_selector import FilterSelector
from ui.widgets.style_input_preview import StyleInputPreview
from ui.widgets.pipeline_manager import PipelineManager
from ui.widgets.preset_selector import PresetSelector
from ui.widgets.favorites_tab import FavoritesTab
from processing.image_processor import ImageProcessor
from processing.image_processing_worker import ImageProcessingWorker
from llm.llm_worker import LLMWorker
from llm.pipeline_generator import PipelineGenerator


class MainWindow(QMainWindow):
    def __init__(self, pipeline_generator: PipelineGenerator):
        super().__init__()
        self.pipeline_generator = pipeline_generator
        self.setWindowTitle("PDI Live Studio")
        self.setGeometry(100, 100, 1200, 800)

        self._apply_dark_theme()
        self._setup_ui()
        self._setup_threads()
        print("MainWindow: UI setup complete.")

    def _apply_dark_theme(self):
        qss_file_path = os.path.abspath(
            os.path.join(os.path.dirname(__file__), "..", "styles", "dark_theme.qss")
        )
        try:
            with open(qss_file_path, "r") as file:
                self.setStyleSheet(file.read())
            print(f"MainWindow: Dark theme loaded from {qss_file_path}")
        except Exception as e:
            print(f"Error loading dark theme QSS: {e}")

    def _setup_ui(self):
        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)
        self.main_layout = QHBoxLayout(self.central_widget)

        # Video display
        self.video_display_layout = QVBoxLayout()
        self.video_label = QLabel("Waiting for video stream...")
        self.video_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.video_label.setFixedSize(640, 480)
        self.video_label.setFrameShape(QFrame.Shape.Box)
        self.video_display_layout.addWidget(self.video_label)

        self.play_pause_button = QPushButton("Pausar")
        self.play_pause_button.clicked.connect(self._toggle_camera_feed)
        self.capture_button = QPushButton("Capturar Imagen")
        self.capture_button.clicked.connect(self._capture_frame)

        self.video_controls_layout = QHBoxLayout()
        self.video_controls_layout.addWidget(self.play_pause_button)
        self.video_controls_layout.addWidget(self.capture_button)

        self.camera_selector = QComboBox()
        self.camera_selector_label = QLabel("Seleccionar cámara:")
        self.camera_selector_label.setStyleSheet("font-weight: bold;")
        self.camera_selector.addItems([f"Cam {i}" for i in list_available_cameras()])
        self.camera_selector.currentIndexChanged.connect(self._on_camera_selected)
        self.video_controls_layout.addWidget(self.camera_selector_label)
        self.video_controls_layout.addWidget(self.camera_selector)

        self.video_display_layout.addLayout(self.video_controls_layout)
        self.histogram_widget = HistogramPlotter()
        self.video_display_layout.addWidget(self.histogram_widget)
        self.main_layout.addLayout(self.video_display_layout)

        # Camera feed
        self.camera_feed = CameraFeed()
        self.camera_feed.frame_ready.connect(self._on_camera_frame_ready)
        self.camera_feed.start()
        self.camera_is_running = True

        # Right panel
        self.controls_panel_layout = QVBoxLayout()
        self.filter_selector = FilterSelector()
        self.filter_selector.filter_selected_to_add.connect(
            self._add_filter_to_pipeline_from_selector
        )

        self.pipeline_manager = PipelineManager()
        self.pipeline_manager.pipeline_updated.connect(self.set_pipeline_from_manager)

        self.style_preview_widget = StyleInputPreview(
            self.camera_feed, self.pipeline_generator
        )

        # LLM group
        self.llm_group_box = QGroupBox("Asistente de Estilos (LLM)")
        self.llm_group_box_layout = QVBoxLayout(self.llm_group_box)

        self.llm_prompt_input = QLineEdit()
        self.llm_prompt_input.setPlaceholderText(
            "Describe el estilo deseado para el video..."
        )
        self.llm_group_box_layout.addWidget(self.llm_prompt_input)

        self.llm_generate_button = QPushButton("Generar Pipeline con LLM")
        self.llm_generate_button.clicked.connect(self._generate_pipeline_with_llm)
        self.llm_group_box_layout.addWidget(self.llm_generate_button)

        self.temperature_input = QDoubleSpinBox()
        self.temperature_input.setRange(0.0, 1.0)
        self.temperature_input.setSingleStep(0.05)
        self.temperature_input.setValue(0.2)
        self.temperature_input.setSuffix("  Temperatura")
        self.llm_group_box_layout.addWidget(self.temperature_input)

        self.debug_checkbox = QCheckBox("Mostrar prompt generado")
        self.llm_group_box_layout.addWidget(self.debug_checkbox)

        self.llm_status_label = QLabel("LLM: Listo")
        self.llm_status_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.llm_group_box_layout.addWidget(self.llm_status_label)

        self.llm_loading_spinner = QLabel()
        self.llm_loading_spinner.setAlignment(Qt.AlignmentFlag.AlignCenter)
        spinner_gif_path = os.path.abspath(
            os.path.join(
                os.path.dirname(__file__), "..", "resources", "loading_spinner.gif"
            )
        )
        self.llm_movie = QMovie(spinner_gif_path)
        if self.llm_movie.isValid():
            self.llm_loading_spinner.setMovie(self.llm_movie)
            self.llm_loading_spinner.setFixedSize(32, 32)
            self.llm_loading_spinner.setScaledContents(True)
        else:
            self.llm_loading_spinner.setText("Cargando...")
        self.llm_loading_spinner.hide()
        self.llm_group_box_layout.addWidget(self.llm_loading_spinner)

        self.preset_selector = PresetSelector()
        self.preset_selector.set_pipeline_source(
            self.pipeline_manager.get_current_pipeline_config
        )
        self.preset_selector.preset_applied.connect(self._apply_preset_from_selector)

        self.pipeline_tabs = QTabWidget()
        manual_tab = QWidget()
        manual_layout = QVBoxLayout(manual_tab)
        manual_layout.addWidget(self.filter_selector)

        splitter = QSplitter(Qt.Orientation.Horizontal)
        splitter.addWidget(self.pipeline_manager)
        splitter.addWidget(self.preset_selector)
        splitter.setSizes([600, 400])
        manual_layout.addWidget(splitter)

        self.favorites_tab = FavoritesTab(self._apply_preset_from_selector)

        llm_tab = QWidget()
        llm_tab.setObjectName("Asistente LLM")
        llm_layout = QVBoxLayout(llm_tab)
        llm_layout.addWidget(self.llm_group_box)
        llm_layout.addWidget(self.style_preview_widget)

        self.pipeline_tabs.addTab(manual_tab, "Manual")
        self.pipeline_tabs.addTab(llm_tab, "Asistente LLM")
        self.pipeline_tabs.addTab(self.favorites_tab, "Favoritos")

        self.controls_panel_layout.addWidget(self.pipeline_tabs)
        self.controls_panel_layout.addStretch(1)
        self.main_layout.addLayout(self.controls_panel_layout)

        self.statusBar = QStatusBar()
        self.setStatusBar(self.statusBar)
        self.show_status_message("PDI Live Studio iniciado.")

    def _setup_threads(self):
        self.image_processor = ImageProcessor()
        self.processing_worker = ImageProcessingWorker(self.image_processor)
        self.processing_worker.processed_frame_ready.connect(
            self.update_video_display_and_histogram
        )
        self.processing_worker.error_occurred.connect(self._handle_processing_error)
        self.processing_worker.start()
        self.set_pipeline_from_manager(
            self.pipeline_manager.get_current_pipeline_config()
        )
        self.current_processed_frame = None

    def disable_llm_tab(self):
        index = self.pipeline_tabs.indexOf(
            self.pipeline_tabs.findChild(QWidget, "Asistente LLM")
        )
        if index != -1:
            self.pipeline_tabs.removeTab(index)
            print("MainWindow: Pestaña LLM deshabilitada por configuración.")

    def _generate_pipeline_with_llm(self):
        prompt = self.llm_prompt_input.text().strip()
        self.style_preview_widget.set_prompt(prompt)

        if not prompt:
            self.show_status_message(
                "Por favor, introduce una descripción para el LLM."
            )
            return

        try:
            import llama_cpp
        except ImportError:
            self.show_status_message("❌ Dependencias de IA no instaladas.")
            return

        model_path = os.path.join("models", "Phi-3-mini-4k-instruct-q4.gguf")
        if not os.path.exists(model_path):
            self.show_status_message(
                "⚠️ Modelo LLM no encontrado. Descárguelo desde la configuración."
            )
            return

        self.llm_generate_button.setEnabled(False)
        self.llm_prompt_input.setEnabled(False)
        self.filter_selector.setEnabled(False)
        self.pipeline_manager.setEnabled(False)

        self.llm_status_label.setText("LLM: Procesando...")
        if self.llm_movie.isValid():
            self.llm_loading_spinner.show()
            self.llm_movie.start()

        self.pipeline_generator.debug = self.debug_checkbox.isChecked()
        self.pipeline_generator.temperature = self.temperature_input.value()

        self.llm_worker = LLMWorker(self.pipeline_generator, prompt)
        self.llm_worker.pipeline_ready.connect(self._on_pipeline_ready)
        self.llm_worker.fallback_used.connect(self._on_fallback_used)
        self.llm_worker.error_occurred.connect(self._on_llm_error)
        self.llm_worker.finished.connect(self._on_llm_finished)
        self.llm_worker.start()

    def _on_pipeline_ready(self, pipeline):
        self.pipeline_manager.set_pipeline_from_config(pipeline)
        self.image_processor.set_pipeline(pipeline)
        self.show_status_message("✅ Pipeline generada por LLM.")
        self.llm_status_label.setText("LLM: Pipeline generada exitosamente.")

    def _on_fallback_used(self, style):
        self.show_status_message(f"⚠️ Se usó fallback para estilo: {style}")
        self.llm_status_label.setText(f"LLM: Fallback activado ({style})")

    def _on_llm_error(self, message):
        self.show_status_message(f"❌ Error LLM: {message}", 5000)
        self.llm_status_label.setText("LLM: Error durante la inferencia.")

    def _on_llm_finished(self):
        self.llm_generate_button.setEnabled(True)
        self.llm_prompt_input.setEnabled(True)
        self.filter_selector.setEnabled(True)
        self.pipeline_manager.setEnabled(True)
        if self.llm_movie.isValid():
            self.llm_movie.stop()
            self.llm_loading_spinner.hide()

    def _add_filter_to_pipeline_from_selector(self, filter_name: str):
        self.pipeline_manager.add_filter_to_pipeline(filter_name)
        self.show_status_message(f"Filtro '{filter_name}' añadido al pipeline.")

    def set_pipeline_from_manager(self, pipeline_config: list):
        self.image_processor.set_pipeline(pipeline_config)
        print("MainWindow: ImageProcessor pipeline updated from PipelineManager.")

    def _handle_processing_error(self, error_message: str):
        QMessageBox.critical(self, "Error de Procesamiento de Imagen", error_message)
        self.show_status_message(f"Error de procesamiento: {error_message}", 5000)

    def _apply_preset_from_selector(self, name: str, pipeline: list):
        self.pipeline_manager.set_pipeline_from_config(pipeline)
        self.image_processor.set_pipeline(pipeline)
        self.show_status_message(f"Preset '{name}' aplicado.")

    def _on_camera_selected(self, index):
        selected_index = self.camera_selector.currentText().split()[-1]
        try:
            selected_index = int(selected_index)
            self.camera_feed.switch_camera(selected_index)
            self.show_status_message(f"🎥 Cámara cambiada a índice {selected_index}")
        except Exception as e:
            self.show_status_message(f"❌ Error al cambiar de cámara: {e}")

    def _toggle_camera_feed(self):
        if self.camera_is_running:
            self.camera_feed.pause()
            self.play_pause_button.setText("Reproducir")
            self.camera_is_running = False
            self.show_status_message("Flujo de cámara pausado.")
        else:
            self.camera_feed.resume()
            self.play_pause_button.setText("Pausar")
            self.camera_is_running = True
            self.show_status_message("Flujo de cámara reanudado.")

    def _capture_frame(self):
        if self.current_processed_frame is not None:
            timestamp = QDateTime.currentDateTime().toString("yyyyMMdd_hhmmsszzz")
            default_filename = f"capture_{timestamp}.png"
            file_path, _ = QFileDialog.getSaveFileName(
                self,
                "Guardar Imagen Capturada",
                default_filename,
                "PNG Images (*.png);;All Files (*)",
            )
            if file_path:
                if cv2.imwrite(file_path, self.current_processed_frame):
                    self.show_status_message(
                        f"Imagen capturada y guardada en {file_path}"
                    )
                else:
                    self.show_status_message("Error al guardar la imagen capturada.")
            else:
                self.show_status_message("Guardar imagen cancelado.")
        else:
            self.show_status_message("No hay fotogramas para capturar aún.")

    def _on_camera_frame_ready(self, frame: np.ndarray):
        if self.processing_worker.isRunning():
            self.processing_worker.enqueue_frame(frame.copy())

    def update_video_display_and_histogram(
        self, processed_frame: np.ndarray, hist_data: np.ndarray
    ):
        self.current_processed_frame = processed_frame
        if processed_frame is None or processed_frame.size == 0:
            return

        h, w = processed_frame.shape[:2]
        if len(processed_frame.shape) == 3:
            rgb_image = cv2.cvtColor(processed_frame, cv2.COLOR_BGR2RGB)
            bytes_per_line = 3 * w
            q_image = QImage(
                rgb_image.data, w, h, bytes_per_line, QImage.Format.Format_RGB888
            )
        else:
            bytes_per_line = w
            q_image = QImage(
                processed_frame.data,
                w,
                h,
                bytes_per_line,
                QImage.Format.Format_Grayscale8,
            )

        pixmap = QPixmap.fromImage(q_image).scaled(
            self.video_label.size(),
            Qt.AspectRatioMode.KeepAspectRatio,
            Qt.TransformationMode.SmoothTransformation,
        )
        self.video_label.setPixmap(pixmap)
        self.histogram_widget.update_plot(hist_data)

    def show_status_message(self, message: str, timeout_ms: int = 3000):
        self.statusBar.showMessage(message, timeout_ms)

    def closeEvent(self, event):
        print("MainWindow: closeEvent triggered. Stopping threads...")
        if hasattr(self, "camera_feed") and self.camera_feed.isRunning():
            self.camera_feed.stop()
            self.camera_feed.wait()
            print("MainWindow: CameraFeed stopped.")
        if self.processing_worker.isRunning():
            self.processing_worker.stop()
            self.processing_worker.wait()
            print("MainWindow: Processing worker stopped.")
        if hasattr(self, "llm_worker") and self.llm_worker.isRunning():
            self.llm_worker.quit()
            self.llm_worker.wait()
            print("MainWindow: LLM worker stopped.")
        event.accept()
